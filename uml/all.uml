@startuml
scale 10


' Declare the SimpleEqualizer class
class SimpleEqualizer {
    + analyze without optimize(lowerBound: int, recordingName: str, playFile: str, fileName: str, fig_name: str, output_filename: str, *args, **kwargs): void
    + analyze with optimize(lowerBound: int, recordingName: str, playFile: str, fileName: str, fig_name: str, output_filename: str, *args, **kwargs): void
    + instructor(points: np.array, recordingName: str, playFile: str, separateDataFileName: str, gainFileName: str, output_filename: str, *args, **kwargs): void
    + white noise test(recordingName: str, playFile: str, fig_name: str, output_filename: str, *args, **kwargs): void
}



' Declare the SoundAnalyzer class
class SoundAnalyzer {
    -gain1000: int
    -lowerBound: int
    -gainbias: int
    -playFile: string
    -oldCSVData: DataFrame
    -csvFileName: string
    -ana_frequency_10dB: array
    -r_fft_10dB: array
    -averageGain: float
    -ana_gain: list
    -ana_frequency: array
    -r_fft: array
    -recordingName: string
    -__closeflag: boolean
    -fftData: array
    -points: list
    -gainDiff: list
    +playandRecord(): void
    +play(): void
    +record_audio(record_second=4): void
    +fft(wave, plot=False, save_fig=False, fig_name='FFT of Signal', output_filename='fft.png', **kwargs): void
    +saveSeparateData(fileName='separateData.csv', optimize=False): void
    +save1000HzGain(fileName='1000HzGain.txt'): void
    +saveRawData(fileName='rawData.csv', optimize=False, cutoff=0): void
}

' Declare the TuningInstructor class
class TuningInstructor {
    - gainAndFreq : dict
    - CSVFileName : string
    - averageGainFile : string
    - averageGain : float
    - status : string
    - criticalFreqs : array
    - gains : array
    - instruction : string

    + __init__(filename=None, averageGainFile=None, *args, **kwargs) : void
    + loadAverageGain() : void
    + loadCSV() : void
    + printInstruction(vocal_enhance=False) : void
    + savePlot(fileName='../../temp_img/separated_spectrum.png') : void
    + __checkInit() : void
}

' Declare the FlaskApp class
class Flask {
  + route(path: str): Function
  + run(debug: bool): void
}



class WebBrowser {
  + open(url: str): void
}

FlaskApp --> Flask: << uses >>
FlaskApp --> Measurement_mission: << uses >>
FlaskApp --> WebBrowser: << uses >>

note right of FlaskApp
  Main Flask application handling
  web routes and multiprocessing
  tasks for measurements.
end note

note right of Measurement_mission
  External class responsible for
  conducting measurements and analysis.
end note

class NoiseGenerator {
  -cutoff_frequency: int
  -duration: int
  -sampleRate: int
  -result: array
  -sample: int
  -noise: array
  -f: array
  -h: array
  -name: string
  +NoiseGenerator(name: string, duration: int, sampleRate: int, reverse: bool)
  +freqAndGain(freq: array, gain: array): void
  +interpolate(): void
  +apply(): void
  +generate(): void
  +saveWav(): void
  +plot(): void
  +makingTESTNoise(): void
  +makeWhiteNoise(): void
}

' Declare the Measurement_mission class
class Measurement_mission {
  {static} +Measurement(standard: String, lower_bound: int, filePATH: String, optimize: String)
  {static} +Measurement_limited(band: int)
  {static} +whiteNoiseTest()
}



' Relationships
SimpleEqualizer ..> SoundAnalyzer : << uses >>
SimpleEqualizer ..> TuningInstructor : << uses >>
Measurement_mission ..> SimpleEqualizer : << uses >>



SoundAnalyzer -->  PyAudio : << uses >>
SoundAnalyzer -->  pygame.mixer : << uses>>
SoundAnalyzer -->  pandas.DataFrame : << uses >>
SoundAnalyzer -->  numpy.array : << uses >>
SoundAnalyzer -->  matplotlib.pyplot : << uses >>


TuningInstructor -->  pandas.DataFrame : << uses >>
TuningInstructor -->  numpy.array : << uses >>
TuningInstructor -->  matplotlib.pyplot : << uses >>

NoiseGenerator -->  numpy.array : << uses >>
NoiseGenerator -->  scipy.signal : << uses >>>
NoiseGenerator -->  scipy.io.wavfile : << uses >>
NoiseGenerator -->  matplotlib.pyplot : << uses >>


@enduml
